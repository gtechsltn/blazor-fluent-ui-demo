@page "/artists"
@using ConcertDatabase.Components.Pages.Artists.Panels
@using ConcertDatabase.Entities
@using ConcertDatabase.Repositories
@inject IDialogService dialogService
@inject ArtistRepository repository
@inject NavigationManager navigationManager

@rendermode InteractiveServer

<h3>Artist List</h3>

<FluentButton IconStart="@(new Icons.Regular.Size16.Add())" OnClick="@(() => AddInDialog())">Add</FluentButton>

@if (artists != null)
{
    <FluentDataGrid Items="@artists" TGridItem="Artist" Pagination="@pagination">
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" />
        <PropertyColumn Property="@(c => c.Description)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditInDialog(context))" />
            <FluentButton IconStart="@(new Icons.Regular.Size16.DesktopEdit())" OnClick="@(() => EditInPanel(context))" />
            <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteItem(context))" />
            <FluentButton IconStart="@(new Icons.Regular.Size16.Glasses())" OnClick="@(() => ShowItem(context))" />
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
}
else
{
    <p><em>Loading...</em></p>
}

@code {

    IQueryable<Artist>? artists;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        artists = repository.Entities.ToList().AsQueryable();
    }

    #region Data Methods

    #region Add

    private async Task AddInDialog()
    {
        // Create new empty object
        Artist newItem = new();

        var parameters = new DialogParameters
            {
                Title = "Add Artist",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };
        // show dialog
        var dialog = await dialogService.ShowDialogAsync<EditArtistPanel>(newItem, parameters);
        var dialogResult = await dialog.Result;
        await HandleAddDialogResult(dialogResult);
    }

    private async Task HandleAddDialogResult(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is not null)
        {
            var newItem = result.Data as Artist;
            if (newItem is null)
            {
                return;
            }
            await repository.AddAsync(newItem);
            await repository.SaveAsync();
            LoadData();
        }
    }

    #endregion 

    #region Edit

    // Open the dialog for the item
    private async Task EditInDialog(Artist originalItem)
    {
        var parameters = new DialogParameters
            {
                Title = "Edit Artist",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await dialogService.ShowDialogAsync<EditArtistPanel>(originalItem.DeepCopy(), parameters);
        var dialogResult = await dialog.Result;
        await HandleEditConcertDialogResult(dialogResult, originalItem);
    }

    // Open the panel for the item
    private async Task EditInPanel(Artist originalItem)
    {
        DialogParameters<Artist> parameters = new()
            {
                Title = $"Edit Artist",
                Alignment = HorizontalAlignment.Right,
                PrimaryAction = "Ok",
                SecondaryAction = "Cancel"
            };
        var dialog = await dialogService.ShowPanelAsync<EditArtistPanel>(originalItem.DeepCopy(), parameters);
        var dialogResult = await dialog.Result;
        await HandleEditConcertDialogResult(dialogResult, originalItem);
    }

    // Handle the result of the edit dialog/panel
    private async Task HandleEditConcertDialogResult(DialogResult result, Artist originalItem)
    {
        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        // If the data is not null, update the item
        if (result.Data is not null)
        {
            var updatedItem = result.Data as Artist;
            if (updatedItem is null)
            {
                return;
            }

            // Take the data from the "edited" item and put it into the original item
            originalItem.Name = updatedItem.Name;
            originalItem.Description = updatedItem.Description;

            repository.Update(originalItem);
            await repository.SaveAsync();
            LoadData();
        }
    }

    #endregion

    #region Delete

    private async Task DeleteItem(Artist item)
    {
        // Check if the item is null
        if (item is null)
        {
            return;
        }

        // Create and show a dialog to confirm the delete
        IDialogReference dialog = await dialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete the artist '{item.Name}'?",
            "Yes", 
            "No", 
            "Delete Artist?");
        DialogResult result = await dialog.Result;

        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        // Delete the item
        try
        {
            repository.Delete(item);
            await repository.SaveAsync();
            LoadData();
        }
        catch (Exception exc)
        {
            string errorMessage = exc.InnerException?.Message ?? exc.Message;
            await dialogService.ShowErrorAsync("Error", errorMessage);
        }
    }

    #endregion


    private void ShowItem(Artist item)
    {
        navigationManager.NavigateTo($"/artist/{item.ID}");
    }

    #endregion
}
